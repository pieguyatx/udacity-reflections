What happens when you initialize a repository?  Why do you need to do it?

  Initializing a repo (with git init) creates a .git hidden folder in the directory that will store all the repo history.  You need to create this before git knows to treat the directory as a repository.

How is the staging area different from the working directory and the repository?  What value do you think it offers?

  The staging area tells you which specific files in the working directory you want to add to the repository, or which files whose changes you want to track.  Its value is that, sometimes you make changes to files, but you might only want to save changes to a particular set of files instead of all of them.  It helps you record more specific changes in a commit.

How can you use the staging area to make sure you have one commit per logical change?

  Add only the relevant files to the staging area when you are done making a logical change in the directory.  Commit the change for just those files.  Use the commands "git diff" and "git diff --staged" to compare the working directory to the staging area, and the staging area to the latest commit in the repository, respectively.

What are some situations when branches would be helpful in keeping your history organized?  How would branches help?

  Different branches would be useful when testing experimental features, making new versions of a project, or customizing a project for a particular purpose.  The branches help you organize the evolution of a project into other forms that have different purposes.

How do the diagrams help you visualize the branch structure?

  They show how the master repository is related to any branches, by showing what commits they share in common.

What is the result of merging two branches together?  Why do we represent it in the diagram the way we do?

  Merged branches are supposed to include all the additions and deletions of two different branches, hopefully with all functions and features still intact.  The tree diagram is a good representation, because it shows where a project diverged in purpose, and possibly where they grew together again.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

  Pros: Save some time, potentially.  Less chance of typos or copy-paste errors.  Allow multiple people working on multiple branches to merge their code faster.  Cons: Can take more time if lots of conflicts occur, when multiple people are working on the same part of the code.  
